Basically while merging 2 linkedlists:
1) Declear a PriprotyQueue and use comparator to compare based on value;
PriorityQueue<ListNode> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a.val));
2) Create a dummy List and assign it to current
3) Add heads of all 3 linkedlists to the prioroity Queue
4) While queue is not empty ; pop the lowest one and if there are still elements left offer them popped.next
5) Return dummy.next



Binary Tree Validation: Basically, if a subtree has a height diff >1 then it is not a binary tree.

                5


           /         \
         2            7
        / \            \
      1     4           9
           /          /
          3          6

From 7: Left height = 0 and Right height = 2 (2 edges) so its not a valid binary tree.


Find the lowest common ancestor:
1) Create a method "isNodePresent" with recursive call to check if the node exists in a path (DFS)
private static boolean findPath(TreeNode root, List<TreeNode> path, int n) {}
2) Create another method that has root, n1, n2
3) Call "isNodePresent" method inside this method to check if node exists for both given nodes.
if either of them return false: return null since there is no common
4) Iterative over both paths


Maximum Sum in a Continuous Path:
=================================
Get sum on every node and carry it to top recursively comparing the sum of two nodes: left and right

Maximum Sum Binary Tree:
==========================
it considers all the nodes left and right whereas it just max of left and right on continuous sum.